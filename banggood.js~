
var banggood;
console.log('############ banggood.js ### banggood started!');
banggood = (function () { // Начало определения анонимной функции

    function getTime() {
        try {
            var date = new Date();
            var result = '';
            result = result + date.getHours() + ':';
            if (date.getMinutes() < 10) {
                result = result + '0';
            }
            result = result + date.getMinutes();
            return result;
        } catch (e) {
            return 'getTime error: ' + e.name;
        }

    }

    function do_text(userText) {
        try {
            var date = new Date();
            $('#TopTextDiv').append('<p>' + getTime() + ' ' + userText + ' ' + '</p>');
        } catch (e) {
            //alert(e.name);
            console.log(window.location.href + ' banggood.js error_dotext ' + e.name + ' ' + e.message + '\nStack:' + e.stack);
        }
        return true;
    }

    function do_form(userNameTmp) {
        try {
            var ButtonGr = $("a[class='checkin-btn'][dpid*='middle_checkIn_button'][dpid*='PointMall']:visible");
            if (ButtonGr.length > 0) {
                // кнопка видна
                ButtonGr.click().delay(1000);
                do_text('All good');
            }
            if (ButtonGr.length > 1) {
                do_text('ЧИСЛО кнопок ' + ButtonGr.length);
            }

            ButtonGr = $("a[dpid*='middle_okIknowSecondDay_button'][dpid*='PointMall']:visible");
            if (ButtonGr.length > 0) {
                // кнопка видна
                ButtonGr.click().delay(1000);
                do_text('All good');
            }
            if (ButtonGr.length > 1) {
                do_text('ЧИСЛО кнопок ' + ButtonGr.length);
            }

			// отлавливаем серую кнопку, признак того, что всё прошло нормально
            ButtonGr = $("a[class='checkin-btn gray'][dpid*='middle_checkIn_button'][dpid*='PointMall']:visible");
            if (ButtonGr.length > 0) {
                // серая кнопка видна, переходим к золотому яйцу
                window.document.location.href='https://www.banggood.com/index.php?com=account&t=dailybonus';
                do_text('All good');
            }
            if (ButtonGr.length > 1) {
                do_text('ЧИСЛО кнопок ' + ButtonGr.length);
            }
			
			
        } catch (e) {
            do_text(window.location.href + ' ButtonGr bangood.js error_dotext ' + e.name + ' ' + e.message + '\nStack:' + e.stack);
        }
    return true;
    }

    function run() {
    //alert('test');
    console.log(getTime() + ' Start run()');
    try {
        if (do_form('') == false) {
            setTimeout(run, 6 * 60 * 1000);
            console.log(getTime() + ' run001 Retry after 6 min ');
            return true;
        }

        setTimeout(run, 3 * 60 * 1000);
        // do_text('Retry after 6 min');
    } catch (e) {
        do_text(window.location.href + ' run error ' + e.name + ' ' + e.message + '\nStack:' + e.stack);
    }

    return true;
}

    return {
    'run': run,
};

})
(); // Конец определения анонимной функции и ее вызов

if (window.location.pathname.match('pointsmall') != null) {
    setTimeout(banggood.run, 2000);
}

var _stringSimilarWindow = function _stringSimilarWindow(S1, S2) {
    // чем более похожи S1 и S2, тем ближе к 1. Разные строки =0
    // приблизительная дистанция между двумя строками
    // вычисляется методом плавающего окна
    var
    j,
    j1,
    i,
    lenSmall,
    BigTXT,
    SmallTXT,
    BadSum,
    GoodSumm,
    LenSubstrMin,
    LenSubstrMax,
    LenSubstrMax1,
    SubsString1,
    Result;
    var div = function (x, y) {
        return Math.round(x / y);
    };

    // начало вычислений

    if (S1.length > S2.length) {
        BigTXT = S1;
        SmallTXT = S2;
    } else {
        BigTXT = S2;
        SmallTXT = S1;
    }
    Result = 0;
    BadSum = 1;
    GoodSumm = 0;
    lenSmall = SmallTXT.length;
    LenSubstrMin = div(lenSmall, 20);
    if (LenSubstrMin < 3) {
        LenSubstrMin = 3;
    }
    if (LenSubstrMin > this._SmallestWordWindow) {
        LenSubstrMin = this._SmallestWordWindow;
    }
    LenSubstrMax = div(lenSmall, 2);
    if (LenSubstrMax > this._BiggestWordWindow) {
        LenSubstrMax = this._BiggestWordWindow;
    }

    for (i = 1; i <= lenSmall; i += this._Step) { // позиция подстроки
        LenSubstrMax1 = LenSubstrMax;
        if (LenSubstrMax + i > lenSmall) {
            LenSubstrMax1 = lenSmall - i;
        }
        for (j = LenSubstrMin; j <= LenSubstrMax1; j++) { // длина подстроки
            SubsString1 = SmallTXT.substr(i, j);
            if (BigTXT.indexOf(SubsString1) < 0) {
                for (j1 = j; j1 <= LenSubstrMax1; j1++) {
                    BadSum = BadSum + j1; // подсчитываем неудачные баллы
                }
                break;
            } else {
                GoodSumm = GoodSumm + j; // подсчитаем удачные баллы
            }
        }
    }
    Result = GoodSumm / (GoodSumm + BadSum) * (this._LenIgnoreKo + lenSmall) / (this._LenIgnoreKo + BigTXT.length);
    return Result;
};

var stringSimilarWindow = function () {
    return _stringSimilarWindow.apply(stringSimilarWindow, arguments);
}
// переменная, которая отвечает за то, насколько подробно анализируются строки при нечетком сравнении (чем меньше, тем подробнее). Рекомендуемое значение = 4
stringSimilarWindow._SmallestWordWindow = 3;
stringSimilarWindow._BiggestWordWindow = 6;
stringSimilarWindow._Step = 2; // окно прыгает сразу на несколько позиций (ускорение счета)
stringSimilarWindow._LenIgnoreKo = 125; // насколько чувствительна должна быть разница между строками при сравнивании. Чем больше, тем меньше чувствительность
